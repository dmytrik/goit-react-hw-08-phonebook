{"version":3,"file":"static/js/111.283e382d.chunk.js","mappings":"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","sources":["components/ContactsList/ContactsList.styled.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","components/ChangeContactForm/ChangeContactForm.styled.jsx","components/ChangeContactForm/ChangeContactForm.jsx","components/ContactsList/ContactsList.jsx","components/Form/Form.styled.jsx","components/Form/Form.jsx","components/Phonebook.styled.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactsBox = styled.div``;\nexport const List = styled.ul``;\n","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  left: 0;\n  top: 0;\n`;\n\nexport const ModalContent = styled.div`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #fff;\n  width: 700px;\n  height: 400px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Backdrop, ModalContent } from './Modal.styled';\nimport PropTypes from 'prop-types';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ closeModal, children }) => {\n  useEffect(() => {\n    const escClose = e => {\n      closeModal(e);\n    };\n    window.addEventListener('keydown', escClose);\n    return () => {\n      window.removeEventListener('keydown', escClose);\n    };\n  });\n  return createPortal(\n    <Backdrop\n      onClick={e => {\n        closeModal(e);\n      }}\n    >\n      <ModalContent>{children}</ModalContent>\n    </Backdrop>,\n    modalRoot\n  );\n};\nexport default Modal;\nModal.propTypes = {\n  closeModal: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li``;\nexport const ContactsBtn = styled.button`\n  cursor: pointer;\n`;\n","import { Item, ContactsBtn } from './ContactItem.styled';\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({\n  name,\n  number,\n  handleDeleteContact,\n  contactChange,\n  id,\n}) => {\n  return (\n    <Item>\n      {name} - {number}\n      <ContactsBtn\n        type=\"button\"\n        onClick={() => {\n          handleDeleteContact(id);\n        }}\n      >\n        Delete\n      </ContactsBtn>\n      <ContactsBtn\n        type=\"button\"\n        onClick={() => {\n          contactChange(id);\n        }}\n      >\n        Change\n      </ContactsBtn>\n    </Item>\n  );\n};\n\nexport default ContactItem;\nContactItem.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  handleDeleteContact: PropTypes.func,\n  contactChange: PropTypes.func,\n  id: PropTypes.string,\n};\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  border: 1px solid black;\n  margin-top: 10px;\n  padding: 15px;\n  width: 400px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  :not(:first-of-type) {\n    margin-top: 10px;\n  }\n`;\n\nexport const Property = styled.span``;\n\nexport const Input = styled.input`\n  margin-top: 10px;\n  width: 200px;\n`;\n\nexport const Submit = styled.button`\n  display: block;\n  margin-top: 20px;\n  cursor: pointer;\n  background-color: transparent;\n  border-style: none;\n  border-radius: 5px;\n  outline: 1px solid silver;\n`;\n","import {\n  Form,\n  Input,\n  Label,\n  Property,\n  Submit,\n} from './ChangeContactForm.styled';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport operations from 'redux/store/contacts-operations';\nimport PropTypes from 'prop-types';\n\nconst ChangeContactForm = ({ currentContact, closeModal }) => {\n  const { id, name, number } = currentContact;\n  const [newName, setNewName] = useState(name);\n  const [newNumber, setNewNumber] = useState(number);\n  const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n\n  const handleContactChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setNewName(value);\n        break;\n      case 'number':\n        setNewNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const changeContact = async e => {\n    e.preventDefault();\n    const changedContact = {\n      id,\n      name: newName,\n      number: newNumber,\n    };\n    for (const el of contacts) {\n      if (el.name.toLowerCase() === changedContact.name.toLocaleLowerCase()) {\n        alert(`без шансів змінити, вже маємо контакт з таким ім'ям`);\n        setNewName('');\n        setNewNumber('');\n        return;\n      }\n    }\n    await dispatch(operations.changeContact(changedContact));\n    closeModal(state => !state);\n  };\n\n  return (\n    <Form onSubmit={changeContact}>\n      <Label>\n        <Property>Name</Property>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={newName}\n          onChange={handleContactChange}\n        ></Input>\n      </Label>\n      <Label>\n        <Property>Number</Property>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={newNumber}\n          onChange={handleContactChange}\n        ></Input>\n      </Label>\n      <Submit type=\"submit\">ChangeContact</Submit>\n    </Form>\n  );\n};\nexport default ChangeContactForm;\nChangeContactForm.propTypes = {\n  currentContact: PropTypes.object,\n  closeModal: PropTypes.func,\n};\n","import { ContactsBox, List } from './ContactsList.styled';\nimport operation from '../../redux/store/contacts-operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { useState, useMemo } from 'react';\nimport Modal from 'components/Modal/Modal';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport ChangeContactForm from 'components/ChangeContactForm/ChangeContactForm';\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n  const userName = useSelector(state => state.user.user.name);\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.contacts.filter);\n\n  const [currentContact, setCurrentContact] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    if (!userName) {\n      return;\n    }\n    dispatch(operation.getContacts());\n  }, [dispatch, userName]);\n\n  const visibleContacts = useMemo(() => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }, [contacts, filter]);\n\n  const handleDeleteContact = id => {\n    dispatch(operation.deleteContact(id));\n  };\n\n  const contactChange = id => {\n    const contact = contacts.find(contact => contact.id === id);\n    setCurrentContact(contact);\n    setShowModal(state => !state);\n  };\n\n  const closeModal = e => {\n    if (e.target === e.currentTarget || e.code === 'Escape') {\n      setShowModal(state => !state);\n    }\n    return;\n  };\n\n  return (\n    <>\n      <ContactsBox>\n        <List>\n          {visibleContacts.map(({ name, number, id }) => (\n            <ContactItem\n              key={`${id}`}\n              name={name}\n              number={number}\n              id={id}\n              handleDeleteContact={handleDeleteContact}\n              contactChange={contactChange}\n            />\n          ))}\n        </List>\n      </ContactsBox>\n      {showModal && (\n        <Modal closeModal={closeModal}>\n          <ChangeContactForm\n            currentContact={currentContact}\n            closeModal={setShowModal}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\nexport default ContactsList;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  border: 1px solid black;\n  margin-top: 10px;\n  padding: 15px;\n  width: 400px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  :not(:first-of-type) {\n    margin-top: 10px;\n  }\n`;\n\nexport const Property = styled.span``;\n\nexport const Input = styled.input`\n  margin-top: 10px;\n  width: 200px;\n`;\n\nexport const Submit = styled.button`\n  display: block;\n  margin-top: 20px;\n  cursor: pointer;\n  background-color: transparent;\n  border-style: none;\n  border-radius: 5px;\n  outline: 1px solid silver;\n`;\n","import { useState } from 'react';\nimport operations from 'redux/store/contacts-operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Label, Property, Input, Submit } from './Form.styled';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  const handleContactChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const submitForm = async e => {\n    e.preventDefault();\n    const contact = {\n      name,\n      number,\n    };\n    for (const el of contacts) {\n      if (el.name.toLowerCase() === contact.name.toLocaleLowerCase()) {\n        alert(`без шансів додати, вже маємо контакт з таким ім'ям`);\n        setName('');\n        setNumber('');\n        return;\n      }\n    }\n    await dispatch(operations.addContact(contact));\n    await dispatch(operations.getContacts());\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <Form onSubmit={submitForm}>\n        <Label>\n          <Property>Name</Property>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleContactChange}\n          ></Input>\n        </Label>\n        <Label>\n          <Property>Number</Property>\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleContactChange}\n          ></Input>\n        </Label>\n        <Submit type=\"submit\">Add contact</Submit>\n      </Form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h1``;\nexport const ContactsListTitle = styled.h2`\n  margin-top: 10px;\n`;\n","import styled from '@emotion/styled';\n\nexport const P = styled.p`\n  margin-top: 5px;\n`;\n","import { Input } from 'components/Form/Form.styled';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/store/contactsSlice';\nimport { P } from './Filter.styled';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <P>Find contacts by name</P>\n      <Input\n        type=\"text\"\n        onChange={e => {\n          dispatch(setFilter({ text: e.target.value }));\n        }}\n      ></Input>\n    </>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport ContactForm from '../Form/Form';\nimport { Title } from '../Phonebook.styled';\nimport Filter from 'components/Filter/Filter';\n\nconst Contacts = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  return (\n    <>\n      <Title>Phonebook</Title>\n      <ContactForm />\n      {contacts.length > 0 && <Filter />}\n      <ContactsList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactsBox","styled","List","Backdrop","ModalContent","modalRoot","document","querySelector","closeModal","children","useEffect","escClose","e","window","addEventListener","removeEventListener","createPortal","onClick","Item","ContactsBtn","name","number","handleDeleteContact","contactChange","id","type","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","Form","Label","Property","Input","Submit","currentContact","useState","newName","setNewName","newNumber","setNewNumber","contacts","useSelector","state","items","dispatch","useDispatch","handleContactChange","currentTarget","changeContact","preventDefault","changedContact","toLowerCase","toLocaleLowerCase","alert","operations","onSubmit","pattern","title","required","onChange","userName","user","filter","setCurrentContact","showModal","setShowModal","operation","visibleContacts","useMemo","includes","contact","find","map","target","code","setName","setNumber","submitForm","Title","P","Filter","setFilter","text"],"sourceRoot":""}